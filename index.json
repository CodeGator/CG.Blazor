{
  "api/CG.Blazor.BlazorResources.html": {
    "href": "api/CG.Blazor.BlazorResources.html",
    "title": "Class BlazorResources",
    "keywords": "Class BlazorResources This class utility contains resources that were dynamically gathered from various plugins at startup. Inheritance System.Object BlazorResources Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor Assembly : CG.Blazor.dll Syntax public static class BlazorResources Properties ExternalResources This property contains a list of external, or 3rd party resources, consumed by a Razor Class Library, that also need to be linked at runtime. Declaration public static IList<string> ExternalResources { get; } Property Value Type Description System.Collections.Generic.IList < System.String > RoutedAssemblies This property contains a list of Razor Class Library assemblies that require routing support, from Blazor, at runtime. Declaration public static IList<Assembly> RoutedAssemblies { get; } Property Value Type Description System.Collections.Generic.IList < System.Reflection.Assembly > Scripts This property contains a list of scripts that are static resources in a Razor Class Library and must be linked at runtime. Declaration public static IList<string> Scripts { get; } Property Value Type Description System.Collections.Generic.IList < System.String > StyleSheets This property contains a list of stylesheets that are static resources in a Razor Class Library and must be linked at runtime. Declaration public static IList<string> StyleSheets { get; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Clear() This method clears any resources contained by this class utility. Declaration public static void Clear() RenderExternalResources() This method renders any external resource links in the ExternalResources collection as a collection of HTML link tags. Declaration public static string RenderExternalResources() Returns Type Description System.String An unencoded HTML snippet. RenderScriptTags() This method renders any scripts in the Scripts collection as a collection of HTML script tags. Declaration public static string RenderScriptTags() Returns Type Description System.String An unencoded HTML snippet. RenderStyleSheetLinks() This method renders any style sheets in the StyleSheets collection as a collection of HTML link tags. Declaration public static string RenderStyleSheetLinks() Returns Type Description System.String An unencoded HTML snippet."
  },
  "api/CG.Blazor.Commands.CommandEventHandler.html": {
    "href": "api/CG.Blazor.Commands.CommandEventHandler.html",
    "title": "Delegate CommandEventHandler",
    "keywords": "Delegate CommandEventHandler This delegate type is used to process command events. Namespace : CG.Blazor.Commands Assembly : CG.Blazor.dll Syntax public delegate void CommandEventHandler(object arg); Parameters Type Name Description System.Object arg Optional arguments for the event."
  },
  "api/CG.Blazor.Commands.CommandEventHandler-1.html": {
    "href": "api/CG.Blazor.Commands.CommandEventHandler-1.html",
    "title": "Delegate CommandEventHandler<T>",
    "keywords": "Delegate CommandEventHandler<T> This delegate type is used to process command events. Namespace : CG.Blazor.Commands Assembly : CG.Blazor.dll Syntax public delegate void CommandEventHandler<T>(T arg); Parameters Type Name Description T arg Optional arguments for the event. Type Parameters Name Description T The type of associated data."
  },
  "api/CG.Blazor.Commands.DelegateCommand.html": {
    "href": "api/CG.Blazor.Commands.DelegateCommand.html",
    "title": "Class DelegateCommand",
    "keywords": "Class DelegateCommand This class is a default implementation of the System.Windows.Input.ICommand interface. Inheritance System.Object DelegateCommand Implements System.Windows.Input.ICommand Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Commands Assembly : CG.Blazor.dll Syntax public sealed class DelegateCommand : ICommand Constructors DelegateCommand(CommandEventHandler) This constructor creates a new instance of the DelegateCommand class. Declaration public DelegateCommand(CommandEventHandler handler) Parameters Type Name Description CommandEventHandler handler The delegate to use with the command. Properties IsEnabled This property indicates whether the command can be executed, or not. Declaration public bool IsEnabled { get; } Property Value Type Description System.Boolean Events CanExecuteChanged This event is raised whenever the IsEnabled property of the command has changed. Declaration public event EventHandler CanExecuteChanged Event Type Type Description System.EventHandler Explicit Interface Implementations ICommand.CanExecute(Object) Declaration bool ICommand.CanExecute(object arg) Parameters Type Name Description System.Object arg Returns Type Description System.Boolean ICommand.Execute(Object) Declaration void ICommand.Execute(object arg) Parameters Type Name Description System.Object arg Implements System.Windows.Input.ICommand"
  },
  "api/CG.Blazor.Commands.DelegateCommand-1.html": {
    "href": "api/CG.Blazor.Commands.DelegateCommand-1.html",
    "title": "Class DelegateCommand<T>",
    "keywords": "Class DelegateCommand<T> This class is a default implementation of the System.Windows.Input.ICommand interface. Inheritance System.Object DelegateCommand<T> Implements System.Windows.Input.ICommand Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Commands Assembly : CG.Blazor.dll Syntax public sealed class DelegateCommand<T> : ICommand Type Parameters Name Description T The type of associated data. Constructors DelegateCommand(CommandEventHandler<T>) This constructor creates a new instance of the DelegateCommand class. Declaration public DelegateCommand(CommandEventHandler<T> handler) Parameters Type Name Description CommandEventHandler <T> handler The delegate to use with the command. Properties IsEnabled This property indicates whether the command can be executed, or not. Declaration public bool IsEnabled { get; } Property Value Type Description System.Boolean Events CanExecuteChanged This event is raised whenever the IsEnabled property of the command has changed. Declaration public event EventHandler CanExecuteChanged Event Type Type Description System.EventHandler Explicit Interface Implementations ICommand.CanExecute(Object) Declaration bool ICommand.CanExecute(object arg) Parameters Type Name Description System.Object arg Returns Type Description System.Boolean ICommand.Execute(Object) Declaration void ICommand.Execute(object arg) Parameters Type Name Description System.Object arg Implements System.Windows.Input.ICommand"
  },
  "api/CG.Blazor.Commands.html": {
    "href": "api/CG.Blazor.Commands.html",
    "title": "Namespace CG.Blazor.Commands",
    "keywords": "Namespace CG.Blazor.Commands Classes DelegateCommand This class is a default implementation of the System.Windows.Input.ICommand interface. DelegateCommand<T> This class is a default implementation of the System.Windows.Input.ICommand interface. Delegates CommandEventHandler This delegate type is used to process command events. CommandEventHandler<T> This delegate type is used to process command events."
  },
  "api/CG.Blazor.Events.EventBase.html": {
    "href": "api/CG.Blazor.Events.EventBase.html",
    "title": "Class EventBase",
    "keywords": "Class EventBase This class is a base for all aggregated event types. Inheritance System.Object EventBase EventBase<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Events Assembly : CG.Blazor.dll Syntax public abstract class EventBase Constructors EventBase() This constructor creates a new instance of the EventBase class. Declaration protected EventBase() Properties Subscriptions This property contains a list of subscriptions. Declaration protected IList<ISubscription> Subscriptions { get; } Property Value Type Description System.Collections.Generic.IList < ISubscription > Methods Contains(ISubscriber) This method indicates whether the event contains the specified token. Declaration public virtual bool Contains(ISubscriber token) Parameters Type Name Description ISubscriber token The token to use for the operation. Returns Type Description System.Boolean True if a match was found; false otherwise. Contains(Action) This method indicates whether the event contains the specified action. Declaration public virtual bool Contains(Action action) Parameters Type Name Description System.Action action The action to use for the operation. Returns Type Description System.Boolean True if a match was found; false otherwise. InternalPublish(Object[]) This method publishes to all active subscriptions. Declaration protected virtual void InternalPublish(params object[] arguments) Parameters Type Name Description System.Object [] arguments The arguments to use for the operation. InternalSubscribe(ISubscription) This method adds a subscription to the list of subscriptions. Declaration protected virtual ISubscriber InternalSubscribe(ISubscription subscription) Parameters Type Name Description ISubscription subscription The subscription to use for the operation. Returns Type Description ISubscriber Publish() This method publishes to any subscriptions for the event. Declaration public virtual void Publish() Subscribe(Action) This method subscribes an action to the event. Declaration public virtual ISubscriber Subscribe(Action action) Parameters Type Name Description System.Action action The delegate to use for the subscription. Returns Type Description ISubscriber A ISubscriber to represent the subscription. Subscribe(Action, Boolean) This method subscribes an action to the event. Declaration public virtual ISubscriber Subscribe(Action action, bool keepAlive) Parameters Type Name Description System.Action action The delegate to use for the subscription. System.Boolean keepAlive True to keep the reference alive by maintaining a reference to the action; false otherwise. Returns Type Description ISubscriber A ISubscriber to represent the subscription. Unsubscribe(ISubscriber) This method unsubscribes an action from the event. Declaration public virtual void Unsubscribe(ISubscriber token) Parameters Type Name Description ISubscriber token The token to use for the subscription. Unsubscribe(Action) This method unsubscribes an action from the event. Declaration public virtual void Unsubscribe(Action action) Parameters Type Name Description System.Action action The action to use for the subscription."
  },
  "api/CG.Blazor.Events.EventBase-1.html": {
    "href": "api/CG.Blazor.Events.EventBase-1.html",
    "title": "Class EventBase<T>",
    "keywords": "Class EventBase<T> This class is a base for all aggregated event types. Inheritance System.Object EventBase EventBase<T> Inherited Members EventBase.Subscriptions EventBase.Subscribe(Action) EventBase.Subscribe(Action, Boolean) EventBase.Unsubscribe(Action) EventBase.Unsubscribe(ISubscriber) EventBase.Contains(Action) EventBase.Contains(ISubscriber) EventBase.Publish() EventBase.InternalSubscribe(ISubscription) EventBase.InternalPublish(Object[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Events Assembly : CG.Blazor.dll Syntax public abstract class EventBase<T> : EventBase Type Parameters Name Description T The type of data associated with the event. Methods Contains(Action<T>) This method indicates whether the event contains the specified action. Declaration public bool Contains(Action<T> action) Parameters Type Name Description System.Action <T> action The action to use for the operation. Returns Type Description System.Boolean True if a match was found; false otherwise. Publish(T) This method publishes to any subscriptions for the event. Declaration public void Publish(T data) Parameters Type Name Description T data The data associated with the event. Subscribe(Action<T>) This method subscribes an action to the event. Declaration public ISubscriber Subscribe(Action<T> action) Parameters Type Name Description System.Action <T> action The action to use for the operation. Returns Type Description ISubscriber A ISubscriber to represent the subscription. Subscribe(Action<T>, Boolean) This method subscribes an action to the event. Declaration public ISubscriber Subscribe(Action<T> action, bool keepAlive) Parameters Type Name Description System.Action <T> action The action to use for the operation. System.Boolean keepAlive True to keep the reference alive by maintaining a reference to the action; false otherwise. Returns Type Description ISubscriber A ISubscriber to represent the subscription. Subscribe(Action<T>, Boolean, Predicate<T>) This method subscribes an action to the event. Declaration public ISubscriber Subscribe(Action<T> action, bool keepAlive, Predicate<T> filter) Parameters Type Name Description System.Action <T> action The action to use for the operation. System.Boolean keepAlive True to keep the reference alive by maintaining a reference to the action; false otherwise. System.Predicate <T> filter An optional filter, for the subscrpition. Returns Type Description ISubscriber A ISubscriber to represent the subscription. Subscribe(Action<T>, Predicate<T>) This method subscribes an action to the event. Declaration public ISubscriber Subscribe(Action<T> action, Predicate<T> filter) Parameters Type Name Description System.Action <T> action The action to use for the operation. System.Predicate <T> filter The predicate to associate with the subscription. Returns Type Description ISubscriber A ISubscriber to represent the subscription. Unsubscribe(Action<T>) This method unsubscribes an action from the event. Declaration public void Unsubscribe(Action<T> action) Parameters Type Name Description System.Action <T> action The action to use for the subscription."
  },
  "api/CG.Blazor.Events.html": {
    "href": "api/CG.Blazor.Events.html",
    "title": "Namespace CG.Blazor.Events",
    "keywords": "Namespace CG.Blazor.Events Classes EventBase This class is a base for all aggregated event types. EventBase<T> This class is a base for all aggregated event types. Interfaces IEventAggregator This interface represents an object that sends and receives events. ISubscriber This interface represents an event subscriber. ISubscription This interface represents an event subscription. IWeakDelegate This interface represents a delegate that maintains a wek reference to the associated target object."
  },
  "api/CG.Blazor.Events.IEventAggregator.html": {
    "href": "api/CG.Blazor.Events.IEventAggregator.html",
    "title": "Interface IEventAggregator",
    "keywords": "Interface IEventAggregator This interface represents an object that sends and receives events. Namespace : CG.Blazor.Events Assembly : CG.Blazor.dll Syntax public interface IEventAggregator Methods GetEvent<TEvent>() This method returns an event of the specified type. Declaration TEvent GetEvent<TEvent>() where TEvent : EventBase, new() Returns Type Description TEvent An event of type TEvent Type Parameters Name Description TEvent The type of event"
  },
  "api/CG.Blazor.Events.ISubscriber.html": {
    "href": "api/CG.Blazor.Events.ISubscriber.html",
    "title": "Interface ISubscriber",
    "keywords": "Interface ISubscriber This interface represents an event subscriber. Namespace : CG.Blazor.Events Assembly : CG.Blazor.dll Syntax public interface ISubscriber Properties Id This property contains the identifier for the subscriber. Declaration Guid Id { get; } Property Value Type Description System.Guid"
  },
  "api/CG.Blazor.Events.ISubscription.html": {
    "href": "api/CG.Blazor.Events.ISubscription.html",
    "title": "Interface ISubscription",
    "keywords": "Interface ISubscription This interface represents an event subscription. Namespace : CG.Blazor.Events Assembly : CG.Blazor.dll Syntax public interface ISubscription Properties Subscriber This property contains a reference to the subscriber. Declaration ISubscriber Subscriber { get; set; } Property Value Type Description ISubscriber Methods GetAction() This method returns the event action for the subscription. Declaration Action<object[]> GetAction() Returns Type Description System.Action < System.Object []> An System.Action<T> object."
  },
  "api/CG.Blazor.Events.IWeakDelegate.html": {
    "href": "api/CG.Blazor.Events.IWeakDelegate.html",
    "title": "Interface IWeakDelegate",
    "keywords": "Interface IWeakDelegate This interface represents a delegate that maintains a wek reference to the associated target object. Namespace : CG.Blazor.Events Assembly : CG.Blazor.dll Syntax public interface IWeakDelegate Properties Target This property contains a reference to the target delegate. Declaration Delegate Target { get; } Property Value Type Description System.Delegate"
  },
  "api/CG.Blazor.html": {
    "href": "api/CG.Blazor.html",
    "title": "Namespace CG.Blazor",
    "keywords": "Namespace CG.Blazor Classes BlazorResources This class utility contains resources that were dynamically gathered from various plugins at startup. Interfaces IModule This interface represents a Blazor plugin module."
  },
  "api/CG.Blazor.IModule.html": {
    "href": "api/CG.Blazor.IModule.html",
    "title": "Interface IModule",
    "keywords": "Interface IModule This interface represents a Blazor plugin module. Namespace : CG.Blazor Assembly : CG.Blazor.dll Syntax public interface IModule Methods Configure(IApplicationBuilder, IWebHostEnvironment) This method is called by the framework when the module is first loaded, to configure the logic within the plugin Declaration void Configure(IApplicationBuilder app, IWebHostEnvironment env) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder app The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment env The environment to use for the operation. ConfigureServices(IServiceCollection, IConfiguration) This method is called by the framework when the module is first loaded, to configure the services within the plugin. Declaration void ConfigureServices(IServiceCollection serviceCollection, IConfiguration configuration) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Remarks The configuration parameter is isolated to the current module's configuration settings so that each module can then add whatever configuration settings are required, for that module. So, for instance, if a module requires repository options, the section can be conveniently placed inside the module's configuration section."
  },
  "api/CG.Blazor.Options.html": {
    "href": "api/CG.Blazor.Options.html",
    "title": "Namespace CG.Blazor.Options",
    "keywords": "Namespace CG.Blazor.Options Classes ModuleOptions This class represents configuration options for a Blazor plugin module. PluginOptions This class represents configuration options for Blazor plugins."
  },
  "api/CG.Blazor.Options.ModuleOptions.html": {
    "href": "api/CG.Blazor.Options.ModuleOptions.html",
    "title": "Class ModuleOptions",
    "keywords": "Class ModuleOptions This class represents configuration options for a Blazor plugin module. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase ModuleOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Options Assembly : CG.Blazor.dll Syntax public class ModuleOptions : OptionsBase, IValidatableObject Properties Assembly This property contains the name of a Blazor plugin assembly Declaration [Required] public string Assembly { get; set; } Property Value Type Description System.String EntryPoint This property contains the name of an entry point for the plugin. Declaration public string EntryPoint { get; set; } Property Value Type Description System.String Routed This property indicates that the plugin requires routing support, from Blazor, at runtime. Declaration public bool Routed { get; set; } Property Value Type Description System.Boolean Scripts This property contains an optional list of scripts, from the plugin, that should be injected into the HTML head section, at runtime. Declaration public IList<string> Scripts { get; set; } Property Value Type Description System.Collections.Generic.IList < System.String > StyleSheets This property contains an optional list of resources, from the plugin, that should be injected into the HTML head section, at runtime. Declaration public IList<string> StyleSheets { get; set; } Property Value Type Description System.Collections.Generic.IList < System.String > Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Blazor.Options.PluginOptions.html": {
    "href": "api/CG.Blazor.Options.PluginOptions.html",
    "title": "Class PluginOptions",
    "keywords": "Class PluginOptions This class represents configuration options for Blazor plugins. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase PluginOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Options Assembly : CG.Blazor.dll Syntax public class PluginOptions : OptionsBase, IValidatableObject Fields SectionKey This constant represents the corresponding configuration key for these options. Declaration public const string SectionKey = \"Plugins\" Field Value Type Description System.String Properties Modules This property contains a list of plugin modules. Declaration [Required] public IList<ModuleOptions> Modules { get; set; } Property Value Type Description System.Collections.Generic.IList < ModuleOptions > Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Blazor.Plugins.html": {
    "href": "api/CG.Blazor.Plugins.html",
    "title": "Namespace CG.Blazor.Plugins",
    "keywords": "Namespace CG.Blazor.Plugins Classes ModuleBase This class is a base implementation of the IModule interface."
  },
  "api/CG.Blazor.Plugins.ModuleBase.html": {
    "href": "api/CG.Blazor.Plugins.ModuleBase.html",
    "title": "Class ModuleBase",
    "keywords": "Class ModuleBase This class is a base implementation of the IModule interface. Inheritance System.Object ModuleBase Implements IModule Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Plugins Assembly : CG.Blazor.dll Syntax public abstract class ModuleBase : IModule Methods Configure(IApplicationBuilder, IWebHostEnvironment) This method is called by the framework when the module is first loaded, to configure the logic within the plugin Declaration public abstract void Configure(IApplicationBuilder app, IWebHostEnvironment env) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder app The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment env The environment to use for the operation. ConfigureServices(IServiceCollection, IConfiguration) This method is called by the framework when the module is first loaded, to configure the services within the plugin. Declaration public abstract void ConfigureServices(IServiceCollection serviceCollection, IConfiguration configuration) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Remarks The configuration parameter is isolated to the current module's configuration settings so that each module can then add whatever configuration settings are required, for that module. So, for instance, if a module requires repository options, the section can be conveniently placed inside the module's configuration section. Implements IModule"
  },
  "api/CG.Blazor.ViewModels.html": {
    "href": "api/CG.Blazor.ViewModels.html",
    "title": "Namespace CG.Blazor.ViewModels",
    "keywords": "Namespace CG.Blazor.ViewModels Classes ViewModelBase This class is a base implementation of the IViewModel interface. Interfaces IViewModel This interface represents a view-model."
  },
  "api/CG.Blazor.ViewModels.IViewModel.html": {
    "href": "api/CG.Blazor.ViewModels.IViewModel.html",
    "title": "Interface IViewModel",
    "keywords": "Interface IViewModel This interface represents a view-model. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : CG.Blazor.ViewModels Assembly : CG.Blazor.dll Syntax public interface IViewModel : INotifyPropertyChanged"
  },
  "api/CG.Blazor.ViewModels.ViewModelBase.html": {
    "href": "api/CG.Blazor.ViewModels.ViewModelBase.html",
    "title": "Class ViewModelBase",
    "keywords": "Class ViewModelBase This class is a base implementation of the IViewModel interface. Inheritance System.Object CG.DisposableBase ViewModelBase Implements System.IDisposable IViewModel System.ComponentModel.INotifyPropertyChanged Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.ViewModels Assembly : CG.Blazor.dll Syntax public abstract class ViewModelBase : DisposableBase, IDisposable, IViewModel, INotifyPropertyChanged Methods OnPropertyChanged(String) This method raises the PropertyChanged event. Declaration protected virtual void OnPropertyChanged(string propertyName = \"\") Parameters Type Name Description System.String propertyName The name of the property. SetValue<T>(ref T, T, String) This method sets the value of the specified property's backing field, then calls OnPropertyChanged(String) on behalf of the property. Declaration protected void SetValue<T>(ref T backingField, T value, string propertyName = null) Parameters Type Name Description T backingField The backing field associated with the property. T value The value to set in the property. System.String propertyName The name of the property. Type Parameters Name Description T The type of the property. Events PropertyChanged This event is raised whenever a property value changes on the view-model. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.IDisposable IViewModel System.ComponentModel.INotifyPropertyChanged"
  },
  "api/CG.Blazor.Views.html": {
    "href": "api/CG.Blazor.Views.html",
    "title": "Namespace CG.Blazor.Views",
    "keywords": "Namespace CG.Blazor.Views Classes ViewBase<T>"
  },
  "api/CG.Blazor.Views.ViewBase-1.html": {
    "href": "api/CG.Blazor.Views.ViewBase-1.html",
    "title": "Class ViewBase<T>",
    "keywords": "Class ViewBase<T> Inheritance System.Object Microsoft.AspNetCore.Components.ComponentBase ViewBase<T> Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleAfterRender Microsoft.AspNetCore.Components.IHandleEvent System.IDisposable Inherited Members Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync() Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem, System.Object) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean) Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Views Assembly : CG.Blazor.dll Syntax public abstract class ViewBase<T> : ComponentBase, IComponent, IHandleAfterRender, IHandleEvent, IDisposable where T : class, IViewModel Type Parameters Name Description T Properties ViewModel This property contains an associated view-model. Declaration [Inject] protected T ViewModel { get; set; } Property Value Type Description T Methods Dispose() This method performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() OnInitializedAsync() This method is invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. Declaration protected override Task OnInitializedAsync() Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleAfterRender Microsoft.AspNetCore.Components.IHandleEvent System.IDisposable"
  },
  "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder Inheritance System.Object ApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Blazor.dll Syntax public static class ApplicationBuilderExtensions Methods UsePlugins(IApplicationBuilder, IWebHostEnvironment) This method wires up services needed to support Blazor plugins. Declaration public static IApplicationBuilder UsePlugins(this IApplicationBuilder applicationBuilder, IWebHostEnvironment webHostEnvironment) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment webHostEnvironment The hosting environment to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder the value of the applicationBuilder parameter, for chaining method calls together."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Blazor.dll Syntax public static class ServiceCollectionExtensions Methods AddEventAggregator(IServiceCollection) This method registers the services required to support event aggregation. Declaration public static IServiceCollection AddEventAggregator(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. AddPlugins(IServiceCollection, IConfiguration) This method adds any configured plugins to the specified service collection. It also registers any resources from the plugins, with Blazor. It also makes the Blazor router aware of any components or pages that require runtime routing support. Declaration public static IServiceCollection AddPlugins(this IServiceCollection serviceCollection, IConfiguration configuration) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Remarks The idea, with this method, is to borrow a concept from Microsoft's PRISM library and dynamically load assemblies that contain pages, components, classes, etc. The end result, hopefully, is a more modular experience than is possible with vanilla Blazor. AddViewModels(IServiceCollection, String, String) Declaration public static IServiceCollection AddViewModels(this IServiceCollection serviceCollection, string assemblyWhiteList = \"\", string assemblyBlackList = \"Microsoft.*,System.*,netstandard\") Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection System.String assemblyWhiteList System.String assemblyBlackList Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Blazor.dll contains server side Blazor extensions used by other CodeGator packages."
  }
}
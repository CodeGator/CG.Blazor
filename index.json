{
  "api/CG.Blazor.BlazorResources.html": {
    "href": "api/CG.Blazor.BlazorResources.html",
    "title": "Class BlazorResources",
    "keywords": "Class BlazorResources This class utility contains resources that were dynamically gathered from various plugins at startup. Inheritance System.Object BlazorResources Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor Assembly : CG.Blazor.dll Syntax public static class BlazorResources Properties ExternalResources This property contains a list of external, or 3rd party resources, consumed by a Razor Class Library, that also need to be linked at runtime. Declaration public static IList<string> ExternalResources { get; } Property Value Type Description System.Collections.Generic.IList < System.String > RoutedAssemblies This property contains a list of Razor Class Library assemblies that require routing support, from Blazor, at runtime. Declaration public static IList<Assembly> RoutedAssemblies { get; } Property Value Type Description System.Collections.Generic.IList < System.Reflection.Assembly > Scripts This property contains a list of scripts that are static resources in a Razor Class Library and must be linked at runtime. Declaration public static IList<string> Scripts { get; } Property Value Type Description System.Collections.Generic.IList < System.String > StyleSheets This property contains a list of stylesheets that are static resources in a Razor Class Library and must be linked at runtime. Declaration public static IList<string> StyleSheets { get; } Property Value Type Description System.Collections.Generic.IList < System.String > Methods Clear() This method clears any resources contained by this class utility. Declaration public static void Clear() RenderExternalResources() This method renders any external resource links in the ExternalResources collection as a collection of HTML link tags. Declaration public static string RenderExternalResources() Returns Type Description System.String An unencoded HTML snippet. RenderScriptTags() This method renders any scripts in the Scripts collection as a collection of HTML script tags. Declaration public static string RenderScriptTags() Returns Type Description System.String An unencoded HTML snippet. RenderStyleSheetLinks() This method renders any style sheets in the StyleSheets collection as a collection of HTML link tags. Declaration public static string RenderStyleSheetLinks() Returns Type Description System.String An unencoded HTML snippet."
  },
  "api/CG.Blazor.html": {
    "href": "api/CG.Blazor.html",
    "title": "Namespace CG.Blazor",
    "keywords": "Namespace CG.Blazor Classes BlazorResources This class utility contains resources that were dynamically gathered from various plugins at startup. ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Interfaces IModule This interface represents a Blazor plugin module."
  },
  "api/CG.Blazor.IModule.html": {
    "href": "api/CG.Blazor.IModule.html",
    "title": "Interface IModule",
    "keywords": "Interface IModule This interface represents a Blazor plugin module. Namespace : CG.Blazor Assembly : CG.Blazor.dll Syntax public interface IModule Methods Configure(IApplicationBuilder, IWebHostEnvironment) This method is called by the framework when the module is first loaded, to configure the logic within the plugin Declaration void Configure(IApplicationBuilder app, IWebHostEnvironment env) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder app The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment env The environment to use for the operation. ConfigureServices(IServiceCollection, IConfiguration) This method is called by the framework when the module is first loaded, to configure the services within the plugin. Declaration void ConfigureServices(IServiceCollection serviceCollection, IConfiguration configuration) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Remarks The configuration parameter is isolated to the current module's configuration settings so that each module can then add whatever configuration settings are required, for that module. So, for instance, if a module requires repository options, the section can be conveniently placed inside the module's configuration section."
  },
  "api/CG.Blazor.Options.html": {
    "href": "api/CG.Blazor.Options.html",
    "title": "Namespace CG.Blazor.Options",
    "keywords": "Namespace CG.Blazor.Options Classes ModuleOptions This class represents configuration options for a Blazor plugin module. PluginOptions This class represents configuration options for Blazor plugins."
  },
  "api/CG.Blazor.Options.ModuleOptions.html": {
    "href": "api/CG.Blazor.Options.ModuleOptions.html",
    "title": "Class ModuleOptions",
    "keywords": "Class ModuleOptions This class represents configuration options for a Blazor plugin module. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase ModuleOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Options Assembly : CG.Blazor.dll Syntax public class ModuleOptions : OptionsBase, IValidatableObject Properties AssemblyNameOrPath This property contains the assembly name, or path, for a Blazor plugin. Declaration [Required] public string AssemblyNameOrPath { get; set; } Property Value Type Description System.String EntryPoint This property contains the name of an entry point for the plugin. Declaration public string EntryPoint { get; set; } Property Value Type Description System.String Routed This property indicates that the plugin requires routing support, from Blazor, at runtime. Declaration public bool Routed { get; set; } Property Value Type Description System.Boolean Scripts This property contains an optional list of scripts, from the plugin, that should be injected into the HTML head section, at runtime. Declaration public IList<string> Scripts { get; set; } Property Value Type Description System.Collections.Generic.IList < System.String > StyleSheets This property contains an optional list of resources, from the plugin, that should be injected into the HTML head section, at runtime. Declaration public IList<string> StyleSheets { get; set; } Property Value Type Description System.Collections.Generic.IList < System.String > Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Blazor.Options.PluginOptions.html": {
    "href": "api/CG.Blazor.Options.PluginOptions.html",
    "title": "Class PluginOptions",
    "keywords": "Class PluginOptions This class represents configuration options for Blazor plugins. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase PluginOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Options Assembly : CG.Blazor.dll Syntax public class PluginOptions : OptionsBase, IValidatableObject Fields SectionKey This constant represents the corresponding configuration key for these options. Declaration public const string SectionKey = \"Plugins\" Field Value Type Description System.String Properties Modules This property contains a list of plugin modules. Declaration [Required] public IList<ModuleOptions> Modules { get; set; } Property Value Type Description System.Collections.Generic.IList < ModuleOptions > Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Blazor.Plugins.html": {
    "href": "api/CG.Blazor.Plugins.html",
    "title": "Namespace CG.Blazor.Plugins",
    "keywords": "Namespace CG.Blazor.Plugins Classes ModuleBase This class is a base implementation of the IModule interface."
  },
  "api/CG.Blazor.Plugins.ModuleBase.html": {
    "href": "api/CG.Blazor.Plugins.ModuleBase.html",
    "title": "Class ModuleBase",
    "keywords": "Class ModuleBase This class is a base implementation of the IModule interface. Inheritance System.Object ModuleBase Implements IModule Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Plugins Assembly : CG.Blazor.dll Syntax public abstract class ModuleBase : IModule Methods Configure(IApplicationBuilder, IWebHostEnvironment) This method is called by the framework when the module is first loaded, to configure the logic within the plugin Declaration public abstract void Configure(IApplicationBuilder app, IWebHostEnvironment env) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder app The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment env The environment to use for the operation. ConfigureServices(IServiceCollection, IConfiguration) This method is called by the framework when the module is first loaded, to configure the services within the plugin. Declaration public abstract void ConfigureServices(IServiceCollection serviceCollection, IConfiguration configuration) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Remarks The configuration parameter is isolated to the current module's configuration settings so that each module can then add whatever configuration settings are required, for that module. So, for instance, if a module requires repository options, the section can be conveniently placed inside the module's configuration section. Implements IModule"
  },
  "api/CG.Blazor.ServiceCollectionExtensions.html": {
    "href": "api/CG.Blazor.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection type. Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor Assembly : CG.Blazor.dll Syntax public static class ServiceCollectionExtensions Methods AddTokenProvider(IServiceCollection, IConfiguration, ServiceLifetime) This method registers a TokenProvider service. Declaration public static IServiceCollection AddTokenProvider(this IServiceCollection serviceCollection, IConfiguration configuration, ServiceLifetime serviceLifetime = ServiceLifetime.Scoped) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Microsoft.Extensions.DependencyInjection.ServiceLifetime serviceLifetime The service lifetime to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together."
  },
  "api/CG.Blazor.Services.html": {
    "href": "api/CG.Blazor.Services.html",
    "title": "Namespace CG.Blazor.Services",
    "keywords": "Namespace CG.Blazor.Services Classes TokenProvider This class caches HTTP tokens to make them easily accessable, from Blazor. TokenService This class is a base implementation of the ITokenService interface. Interfaces ITokenService This interface represents an object that manages IdentityServer4 access tokens."
  },
  "api/CG.Blazor.Services.ITokenService.html": {
    "href": "api/CG.Blazor.Services.ITokenService.html",
    "title": "Interface ITokenService",
    "keywords": "Interface ITokenService This interface represents an object that manages IdentityServer4 access tokens. Namespace : CG.Blazor.Services Assembly : CG.Blazor.dll Syntax public interface ITokenService Methods EnsureAccessTokenAsync(CancellationToken) This method ensures the returned access token is always current. Declaration Task<string> EnsureAccessTokenAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > The refreshed HTTP access token."
  },
  "api/CG.Blazor.Services.TokenProvider.html": {
    "href": "api/CG.Blazor.Services.TokenProvider.html",
    "title": "Class TokenProvider",
    "keywords": "Class TokenProvider This class caches HTTP tokens to make them easily accessable, from Blazor. Inheritance System.Object TokenProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Services Assembly : CG.Blazor.dll Syntax public class TokenProvider Properties AccessToken This property contains a bearer access token. Declaration public string AccessToken { get; set; } Property Value Type Description System.String ExpiresAt This property indicates how long until the access token expires. Declaration public DateTimeOffset ExpiresAt { get; set; } Property Value Type Description System.DateTimeOffset RefreshToken This property contains a refresh token. Declaration public string RefreshToken { get; set; } Property Value Type Description System.String XsrfToken This property contains a cross-reference forgery validation token. Declaration public string XsrfToken { get; set; } Property Value Type Description System.String"
  },
  "api/CG.Blazor.Services.TokenService.html": {
    "href": "api/CG.Blazor.Services.TokenService.html",
    "title": "Class TokenService",
    "keywords": "Class TokenService This class is a base implementation of the ITokenService interface. Inheritance System.Object TokenService Implements ITokenService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Services Assembly : CG.Blazor.dll Syntax public abstract class TokenService : ITokenService Constructors TokenService(TokenProvider) This constructor creates a new instance of the TokenService class. Declaration public TokenService(TokenProvider tokenProvider) Parameters Type Name Description TokenProvider tokenProvider The token provider to use with the service. Fields _tokenProvider This property contains a reference to a token provider. Declaration protected TokenProvider _tokenProvider Field Value Type Description TokenProvider Methods EnsureAccessTokenAsync(CancellationToken) This method ensures the returned access token is always current. Declaration public abstract Task<string> EnsureAccessTokenAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task < System.String > The refreshed HTTP access token. Implements ITokenService"
  },
  "api/CG.Blazor.ViewModels.BlazorViewModelBase.html": {
    "href": "api/CG.Blazor.ViewModels.BlazorViewModelBase.html",
    "title": "Class BlazorViewModelBase",
    "keywords": "Class BlazorViewModelBase This class is a Blazor specific, base implementation of the CG.Mvvm.ViewModels.IViewModel interface. Inheritance System.Object CG.DisposableBase CG.Mvvm.ViewModels.ViewModelBase BlazorViewModelBase Implements System.IDisposable CG.Mvvm.ViewModels.IViewModel System.ComponentModel.INotifyPropertyChanged Inherited Members CG.Mvvm.ViewModels.ViewModelBase.OnPropertyChanged(System.String) CG.Mvvm.ViewModels.ViewModelBase.SetValue<T>(T, T, System.String) CG.Mvvm.ViewModels.ViewModelBase.PropertyChanged CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.ViewModels Assembly : CG.Blazor.dll Syntax public abstract class BlazorViewModelBase : ViewModelBase, IDisposable, IViewModel, INotifyPropertyChanged Methods OnInitializedAsync() This method is called to initialize the view-model. Declaration public virtual Task OnInitializedAsync() Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Implements System.IDisposable CG.Mvvm.ViewModels.IViewModel System.ComponentModel.INotifyPropertyChanged"
  },
  "api/CG.Blazor.ViewModels.html": {
    "href": "api/CG.Blazor.ViewModels.html",
    "title": "Namespace CG.Blazor.ViewModels",
    "keywords": "Namespace CG.Blazor.ViewModels Classes BlazorViewModelBase This class is a Blazor specific, base implementation of the CG.Mvvm.ViewModels.IViewModel interface."
  },
  "api/CG.Blazor.Views.html": {
    "href": "api/CG.Blazor.Views.html",
    "title": "Namespace CG.Blazor.Views",
    "keywords": "Namespace CG.Blazor.Views Classes ViewBase<T> This class is a base implementation of a Blazor view."
  },
  "api/CG.Blazor.Views.ViewBase-1.html": {
    "href": "api/CG.Blazor.Views.ViewBase-1.html",
    "title": "Class ViewBase<T>",
    "keywords": "Class ViewBase<T> This class is a base implementation of a Blazor view. Inheritance System.Object Microsoft.AspNetCore.Components.ComponentBase ViewBase<T> Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender System.IDisposable Inherited Members Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem, System.Object) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Blazor.Views Assembly : CG.Blazor.dll Syntax public abstract class ViewBase<T> : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender, IDisposable where T : class, IViewModel Type Parameters Name Description T The type of associated view-model. Remarks The idea, with this class, is to create a simple MVVM integration for use with Blazor. As we all know, Blazor was deliberately designed not favor any one paradigm over another, so, if we want to use MVVM with Blazor, which we do, then we're on our own for that part. That's fine though because, the only parts that are really missing are property change notifications, and we'll handle those here. Examples All that's required to use this class is to add the following tag to your razor page markup: @inherits ViewBase{IMyViewModel} Where IMyViewModel is, whatever your view-model type is. Properties ViewModel This property contains an associated view-model. Declaration [Inject] protected T ViewModel { get; set; } Property Value Type Description T Methods Dispose() This method performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() OnInitializedAsync() This method is invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. Declaration protected override Task OnInitializedAsync() Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Overrides Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender System.IDisposable"
  },
  "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder Inheritance System.Object ApplicationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.AspNetCore.Builder Assembly : CG.Blazor.dll Syntax public static class ApplicationBuilderExtensions Methods UsePlugins(IApplicationBuilder, IWebHostEnvironment) This method wires up services needed to support Blazor plugins. Declaration public static IApplicationBuilder UsePlugins(this IApplicationBuilder applicationBuilder, IWebHostEnvironment webHostEnvironment) Parameters Type Name Description Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder The application builder to use for the operation. Microsoft.AspNetCore.Hosting.IWebHostEnvironment webHostEnvironment The hosting environment to use for the operation. Returns Type Description Microsoft.AspNetCore.Builder.IApplicationBuilder the value of the applicationBuilder parameter, for chaining method calls together."
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes ApplicationBuilderExtensions This class contains extension methods related to the Microsoft.AspNetCore.Builder.IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions This class contains extension methods related to the Microsoft.Extensions.DependencyInjection.IServiceCollection Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : CG.Blazor.dll Syntax public static class ServiceCollectionExtensions Methods AddPlugins(IServiceCollection, IDataProtector, IConfiguration) This method adds any configured plugins to the specified service collection. It also registers any resources from the plugins, with Blazor. It also makes the Blazor router aware of any components or pages that require runtime routing support. Declaration public static IServiceCollection AddPlugins(this IServiceCollection serviceCollection, IDataProtector dataProtector, IConfiguration configuration) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection The service collection to use for the operation. Microsoft.AspNetCore.DataProtection.IDataProtector dataProtector The data protector to use for the operation. Microsoft.Extensions.Configuration.IConfiguration configuration The configuration to use for the operation. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The value of the serviceCollection parameter, for chaining calls together. Remarks The idea, with this method, is to borrow a concept from Microsoft's PRISM library and dynamically load assemblies that contain pages, components, classes, etc. The end result, hopefully, is a more modular experience than is possible with vanilla Blazor."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Blazor.dll contains server side Blazor extensions used by other CodeGator packages."
  }
}
@page "/sample"
@inherits ViewBase<ISampleViewModel>

@using CG.Blazor.QuickStart.Plugin.ViewModels

<h1>Sample Page</h1>
<p>This razor page was loaded at runtime. It demonstrates the following:</p>
<ul>
    <li>The <code>CG.Blazor</code> library can easily load your Razor Class Library, as a plugin, at runtime.</li>
    <li>Plugins can have static resources, like style sheets and java scripts.</li>
    <li>Pages and components in a plugin route the same way standard Razor pages and components do.</li>
    <li>Pages can use the view-model extensions in <code>CG.Blazor</code> to improve testability and separation of concerns.</li>
    <li>Plugins can register services by implementing the <code>IModule</code> interface, in their own class.</li>
</ul>

<hr />

<h2>Example</h2>
<p>This button is colored using a class in the 'style.css' stylesheet, which is embedded inside the <code>CG.Blazor.QuickStart.Plugin</code> 
   assembly. The stylesheet is dynamically injected into the HTML head using the <code>CG.Blazor</code> plugin extensions. 
</p>

<button id="sampleButton" class="sampleButton" @onclick=@(() => ViewModel.Command.Execute(this))>@ViewModel.A</button>
<label for="sampleButton">@ViewModel.B</label>

<p>
    The button is bound to an <code>ICommand</code>, in a view-model, just like we're all familiar with. For this demonstration, that command calls a service to return the current time,
    thereby illustrating how views, view-models, services, scripts, stylsheets, and more, can all live together in the same plugin assembly - but still enjoy total isolation from the main web project, or any other plugins.
</p>
